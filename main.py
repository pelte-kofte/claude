#!/usr/bin/env python3
import sys
import os
import time
import logging
import json
import requests
import qrcode
from io import BytesIO
from datetime import datetime, timedelta
from urllib.parse import quote

from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QWidget, QLabel, QScrollArea, QFrame, QGridLayout,
                             QStackedWidget, QSizePolicy)
from PyQt5.QtCore import (QTimer, QThread, pyqtSignal, Qt, QSize, QRect, 
                          QPropertyAnimation, QEasingCurve, pyqtSlot)
from PyQt5.QtGui import (QPixmap, QFont, QPainter, QPen, QBrush, QColor, 
                         QLinearGradient, QPalette, QIcon, QCursor)

# Local imports
from config import Config, Colors, Fonts, Styles, RaspberryPiConfig, is_raspberry_pi, is_test_environment

# Logging setup
logging.basicConfig(
    level=getattr(logging, Config.LOG_LEVEL),
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Config.LOG_FILE),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class DataFetcher(QThread):
    """Arka planda veri √ßekme sƒ±nƒ±fƒ±"""
    pharmacy_data_ready = pyqtSignal(list)
    weather_data_ready = pyqtSignal(dict)
    error_occurred = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.running = True
        
    def fetch_pharmacy_data(self):
        """ƒ∞zmir Eczacƒ± Odasƒ±'ndan n√∂bet√ßi eczane verilerini √ßeker"""
        try:
            url = "https://www.izmireczaciodasi.org.tr/nobetci-eczaneler"
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux armv7l) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            # HTML parsing (basit regex ile)
            import re
            pharmacy_pattern = r'<div class="eczane-item.*?data-bolge="([^"]*)".*?<h3[^>]*>([^<]+)</h3>.*?<p[^>]*>([^<]+)</p>.*?<span[^>]*>([^<]+)</span>'
            
            pharmacies = []
            matches = re.findall(pharmacy_pattern, response.text, re.DOTALL)
            
            for match in matches:
                region, name, address, phone = match
                region = region.strip()
                
                if Config.TARGET_REGION.upper() in region.upper():
                    pharmacy = {
                        'name': name.strip(),
                        'address': address.strip(),
                        'phone': phone.strip(),
                        'region': region.strip(),
                        'coordinates': self.get_coordinates(address.strip())
                    }
                    pharmacies.append(pharmacy)
            
            self.pharmacy_data_ready.emit(pharmacies)
            logger.info(f"Fetched {len(pharmacies)} pharmacies for {Config.TARGET_REGION}")
            
        except Exception as e:
            logger.error(f"Error fetching pharmacy data: {e}")
            self.error_occurred.emit(f"Eczane verileri alƒ±namadƒ±: {str(e)}")
    
    def get_coordinates(self, address):
        """Adres i√ßin koordinat bilgilerini getirir (Nominatim)"""
        try:
            # Nominatim API (OpenStreetMap)
            query = f"{address}, {Config.CITY_NAME}, Turkey"
            url = f"https://nominatim.openstreetmap.org/search?q={quote(query)}&format=json&limit=1"
            
            headers = {'User-Agent': 'EczaneNobetSistemi/1.0'}
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data:
                    return {
                        'lat': float(data[0]['lat']),
                        'lon': float(data[0]['lon'])
                    }
            
            # Fallback: varsayƒ±lan koordinatlar
            return {'lat': Config.DEFAULT_LAT, 'lon': Config.DEFAULT_LON}
            
        except Exception as e:
            logger.warning(f"Coordinate fetch failed for {address}: {e}")
            return {'lat': Config.DEFAULT_LAT, 'lon': Config.DEFAULT_LON}
    
    def fetch_weather_data(self):
        """OpenWeatherMap'ten hava durumu verilerini √ßeker"""
        try:
            url = f"http://api.openweathermap.org/data/2.5/weather"
            params = {
                'q': f'{Config.CITY_NAME},TR',
                'appid': Config.OPENWEATHER_API_KEY,
                'units': 'metric',
                'lang': 'tr'
            }
            
            response = requests.get(url, params=params, timeout=15)
            response.raise_for_status()
            data = response.json()
            
            weather_info = {
                'temperature': round(data['main']['temp']),
                'description': data['weather'][0]['description'].title(),
                'humidity': data['main']['humidity'],
                'feels_like': round(data['main']['feels_like']),
                'icon': data['weather'][0]['icon']
            }
            
            self.weather_data_ready.emit(weather_info)
            logger.info(f"Weather data fetched: {weather_info['temperature']}¬∞C")
            
        except Exception as e:
            logger.error(f"Error fetching weather data: {e}")
            self.error_occurred.emit(f"Hava durumu alƒ±namadƒ±: {str(e)}")
    
    def run(self):
        """Thread ana d√∂ng√ºs√º"""
        self.fetch_pharmacy_data()
        self.fetch_weather_data()

class PharmacyCard(QFrame):
    """Tek eczane kartƒ± widget'ƒ±"""
    
    def __init__(self, pharmacy_data):
        super().__init__()
        self.pharmacy_data = pharmacy_data
        self.setup_ui()
        
    def setup_ui(self):
        """Kart aray√ºz√ºn√º olu≈üturur"""
        self.setFrameStyle(QFrame.Box)
        self.setStyleSheet(Styles.CARD)
        self.setFixedHeight(300)  # Dikey ekran i√ßin sabit y√ºkseklik
        
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        layout.setContentsMargins(15, 15, 15, 15)
        
        # Eczane adƒ±
        name_label = QLabel(self.pharmacy_data['name'])
        name_label.setStyleSheet(Styles.SUBTITLE_LABEL)
        name_label.setWordWrap(True)
        name_label.setAlignment(Qt.AlignTop)
        layout.addWidget(name_label)
        
        # Adres
        address_label = QLabel(self.pharmacy_data['address'])
        address_label.setStyleSheet(Styles.NORMAL_LABEL)
        address_label.setWordWrap(True)
        address_label.setAlignment(Qt.AlignTop)
        layout.addWidget(address_label)
        
        # Telefon
        phone_label = QLabel(f"üìû {self.pharmacy_data['phone']}")
        phone_label.setStyleSheet(Styles.NORMAL_LABEL)
        layout.addWidget(phone_label)
        
        # Alt kƒ±sƒ±m: QR ve Harita
        bottom_layout = QHBoxLayout()
        
        # QR Kod
        qr_widget = self.create_qr_widget()
        bottom_layout.addWidget(qr_widget)
        
        # Harita
        map_widget = self.create_map_widget()
        bottom_layout.addWidget(map_widget)
        
        layout.addLayout(bottom_layout)
        layout.addStretch()
    
    def create_qr_widget(self):
        """QR kod widget'ƒ±nƒ± olu≈üturur"""
        qr_widget = QWidget()
        qr_layout = QVBoxLayout(qr_widget)
        
        # QR kod olu≈ütur
        coords = self.pharmacy_data['coordinates']
        maps_url = f"https://www.google.com/maps?q={coords['lat']},{coords['lon']}"
        
        qr = qrcode.QRCode(version=1, box_size=3, border=2)
        qr.add_data(maps_url)
        qr.make(fit=True)
        
        qr_img = qr.make_image(fill_color="white", back_color="black")
        
        # QPixmap'e d√∂n√º≈üt√ºr
        buffer = BytesIO()
        qr_img.save(buffer, format='PNG')
        buffer.seek(0)
        
        pixmap = QPixmap()
        pixmap.loadFromData(buffer.getvalue())
        pixmap = pixmap.scaled(Config.QR_SIZE, Config.QR_SIZE, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
        qr_label = QLabel()
        qr_label.setPixmap(pixmap)
        qr_label.setAlignment(Qt.AlignCenter)
        
        qr_text = QLabel("QR ile Yol Tarifi")
        qr_text.setStyleSheet(f"color: {Colors.SECONDARY_TEXT}; font-size: {Fonts.SMALL_SIZE}px;")
        qr_text.setAlignment(Qt.AlignCenter)
        
        qr_layout.addWidget(qr_label)
        qr_layout.addWidget(qr_text)
        
        return qr_widget
    
    def create_map_widget(self):
        """Harita widget'ƒ±nƒ± olu≈üturur"""
        map_widget = QWidget()
        map_layout = QVBoxLayout(map_widget)
        
        # Google Static Maps API
        coords = self.pharmacy_data['coordinates']
        map_url = (
            f"https://maps.googleapis.com/maps/api/staticmap?"
            f"center={coords['lat']},{coords['lon']}&"
            f"zoom={Config.MAP_ZOOM}&"
            f"size={Config.MAP_WIDTH}x{Config.MAP_HEIGHT}&"
            f"markers=color:red%7C{coords['lat']},{coords['lon']}&"
            f"key={Config.GOOGLE_MAPS_API_KEY}"
        )
        
        # Harita resmini y√ºkle
        try:
            response = requests.get(map_url, timeout=15)
            if response.status_code == 200:
                pixmap = QPixmap()
                pixmap.loadFromData(response.content)
                pixmap = pixmap.scaled(250, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                
                map_label = QLabel()
                map_label.setPixmap(pixmap)
                map_label.setAlignment(Qt.AlignCenter)
                map_layout.addWidget(map_label)
            else:
                # Harita y√ºklenemedi
                error_label = QLabel("üó∫Ô∏è Harita y√ºklenemedi")
                error_label.setStyleSheet(f"color: {Colors.WARNING_TEXT}; font-size: {Fonts.SMALL_SIZE}px;")
                error_label.setAlignment(Qt.AlignCenter)
                map_layout.addWidget(error_label)
                
        except Exception as e:
            logger.error(f"Map loading failed: {e}")
            error_label = QLabel("üó∫Ô∏è Harita hatasƒ±")
            error_label.setStyleSheet(f"color: {Colors.ERROR_TEXT}; font-size: {Fonts.SMALL_SIZE}px;")
            error_label.setAlignment(Qt.AlignCenter)
            map_layout.addWidget(error_label)
        
        return map_widget

class HeaderWidget(QWidget):
    """√úst ba≈ülƒ±k widget'ƒ± - dikey ekran i√ßin optimize"""
    
    def __init__(self):
        super().__init__()
        self.weather_data = {}
        self.setup_ui()
        
    def setup_ui(self):
        """Header aray√ºz√ºn√º olu≈üturur"""
        self.setObjectName("header")
        self.setStyleSheet(Styles.HEADER)
        self.setFixedHeight(120)
        
        layout = QHBoxLayout(self)
        layout.setContentsMargins(20, 15, 20, 15)
        
        # Sol taraf: Logo ve ba≈ülƒ±k
        left_layout = QVBoxLayout()
        
        title_label = QLabel("üè• N√ñBET√áƒ∞ ECZANELER")
        title_label.setStyleSheet(Styles.TITLE_LABEL)
        left_layout.addWidget(title_label)
        
        region_label = QLabel(f"üìç {Config.TARGET_REGION}")
        region_label.setStyleSheet(Styles.SUBTITLE_LABEL)
        left_layout.addWidget(region_label)
        
        layout.addLayout(left_layout)
        layout.addStretch()
        
        # Saƒü taraf: Tarih, saat, hava durumu
        right_layout = QVBoxLayout()
        right_layout.setAlignment(Qt.AlignRight | Qt.AlignTop)
        
        # Tarih ve saat
        self.datetime_label = QLabel()
        self.datetime_label.setStyleSheet(f"""
            QLabel {{
                color: {Colors.PRIMARY_TEXT};
                font-size: {Fonts.TIME_SIZE}px;
                font-weight: bold;
                text-align: right;
            }}
        """)
        self.datetime_label.setAlignment(Qt.AlignRight)
        right_layout.addWidget(self.datetime_label)
        
        # Hava durumu
        self.weather_label = QLabel()
        self.weather_label.setStyleSheet(f"""
            QLabel {{
                color: {Colors.ACCENT_TEXT};
                font-size: {Fonts.SUBTITLE_SIZE}px;
                text-align: right;
            }}
        """)
        self.weather_label.setAlignment(Qt.AlignRight)
        right_layout.addWidget(self.weather_label)
        
        layout.addLayout(right_layout)
        
        # Zaman g√ºncellemesi i√ßin timer
        self.time_timer = QTimer()
        self.time_timer.timeout.connect(self.update_datetime)
        self.time_timer.start(Config.TIME_UPDATE_INTERVAL)
        self.update_datetime()
    
    def update_datetime(self):
        """Tarih ve saati g√ºnceller"""
        now = datetime.now()
        date_str = now.strftime("%d.%m.%Y")
        time_str = now.strftime("%H:%M:%S")
        day_str = now.strftime("%A")
        
        # T√ºrk√ße g√ºn isimleri
        day_names = {
            'Monday': 'Pazartesi', 'Tuesday': 'Salƒ±', 'Wednesday': '√áar≈üamba',
            'Thursday': 'Per≈üembe', 'Friday': 'Cuma', 'Saturday': 'Cumartesi', 'Sunday': 'Pazar'
        }
        day_tr = day_names.get(day_str, day_str)
        
        datetime_text = f"{time_str}\n{date_str} {day_tr}"
        self.datetime_label.setText(datetime_text)
    
    def update_weather(self, weather_data):
        """Hava durumu bilgilerini g√ºnceller"""
        self.weather_data = weather_data
        
        temp = weather_data.get('temperature', 0)
        desc = weather_data.get('description', 'Bilinmiyor')
        
        # Sƒ±caklƒ±ƒüa g√∂re renk se√ßimi
        if temp < 10:
            temp_color = Colors.TEMP_COLD
        elif temp < 20:
            temp_color = Colors.TEMP_MILD
        elif temp < 30:
            temp_color = Colors.TEMP_WARM
        else:
            temp_color = Colors.TEMP_HOT
        
        weather_text = f"üå°Ô∏è {temp}¬∞C\n{desc}"
        self.weather_label.setText(weather_text)
        self.weather_label.setStyleSheet(f"""
            QLabel {{
                color: {temp_color};
                font-size: {Fonts.SUBTITLE_SIZE}px;
                font-weight: 500;
                text-align: right;
            }}
        """)

class MainWindow(QMainWindow):
    """Ana pencere sƒ±nƒ±fƒ± - Raspberry Pi dikey ekran i√ßin optimize"""
    
    def __init__(self):
        super().__init__()
        self.pharmacies = []
        self.setup_ui()
        self.setup_data_fetching()
        
    def setup_ui(self):
        """Ana aray√ºz√º olu≈üturur"""
        self.setWindowTitle("N√∂bet√ßi Eczane Sistemi")
        self.setStyleSheet(Styles.MAIN_WINDOW)
        
        # Raspberry Pi modunda tam ekran ve imle√ß gizleme
        if Config.RASPBERRY_PI_MODE and is_raspberry_pi():
            if Config.FULLSCREEN:
                self.showFullScreen()
            if Config.HIDE_CURSOR:
                self.setCursor(QCursor(Qt.BlankCursor))
        else:
            # Test modunda pencere boyutu
            self.resize(Config.WINDOW_WIDTH, Config.WINDOW_HEIGHT)
        
        # Ana widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Ana layout (dikey)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # Header
        self.header = HeaderWidget()
        main_layout.addWidget(self.header)
        
        # ƒ∞√ßerik alanƒ±
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setStyleSheet(Styles.SCROLLBAR)
        
        # Scroll widget
        self.scroll_widget = QWidget()
        self.scroll_layout = QVBoxLayout(self.scroll_widget)
        self.scroll_layout.setSpacing(10)
        self.scroll_layout.setContentsMargins(10, 10, 10, 10)
        
        # Y√ºkleme mesajƒ±
        self.loading_label = QLabel("üì° N√∂bet√ßi eczane bilgileri y√ºkleniyor...")
        self.loading_label.setStyleSheet(Styles.TITLE_LABEL)
        self.loading_label.setAlignment(Qt.AlignCenter)
        self.scroll_layout.addWidget(self.loading_label)
        
        self.scroll_area.setWidget(self.scroll_widget)
        main_layout.addWidget(self.scroll_area)
        
        # Alt bilgi √ßubuƒüu
        footer = QLabel("üíä Kar≈üƒ±yaka 4. B√∂lge N√∂bet√ßi Eczaneler ‚Ä¢ Otomatik g√ºncelleme aktif")
        footer.setStyleSheet(f"""
            QLabel {{
                background-color: {Colors.SECONDARY_BG};
                color: {Colors.SECONDARY_TEXT};
                font-size: {Fonts.SMALL_SIZE}px;
                padding: 8px;
                border-top: 1px solid {Colors.BORDER_COLOR};
                text-align: center;
            }}
        """)
        footer.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(footer)
    
    def setup_data_fetching(self):
        """Veri √ßekme timer'larƒ±nƒ± ayarlar"""
        # ƒ∞lk veri √ßekme
        self.fetch_data()
        
        # Periyodik g√ºncellemeler
        self.pharmacy_timer = QTimer()
        self.pharmacy_timer.timeout.connect(self.fetch_pharmacy_data)
        self.pharmacy_timer.start(Config.PHARMACY_UPDATE_INTERVAL)
        
        self.weather_timer = QTimer()
        self.weather_timer.timeout.connect(self.fetch_weather_data)
        self.weather_timer.start(Config.WEATHER_UPDATE_INTERVAL)
    
    def fetch_data(self):
        """ƒ∞lk veri y√ºklemesini ba≈ülatƒ±r"""
        self.fetch_pharmacy_data()
        self.fetch_weather_data()
    
    def fetch_pharmacy_data(self):
        """Eczane verilerini √ßeker"""
        self.data_fetcher = DataFetcher()
        self.data_fetcher.pharmacy_data_ready.connect(self.update_pharmacy_display)
        self.data_fetcher.error_occurred.connect(self.handle_error)
        self.data_fetcher.finished.connect(self.data_fetcher.deleteLater)
        self.data_fetcher.fetch_pharmacy_data()
    
    def fetch_weather_data(self):
        """Hava durumu verilerini √ßeker"""
        weather_fetcher = DataFetcher()
        weather_fetcher.weather_data_ready.connect(self.header.update_weather)
        weather_fetcher.error_occurred.connect(self.handle_error)
        weather_fetcher.finished.connect(weather_fetcher.deleteLater)
        weather_fetcher.fetch_weather_data()
    
    @pyqtSlot(list)
    def update_pharmacy_display(self, pharmacies):
        """Eczane listesini g√ºnceller"""
        self.pharmacies = pharmacies
        
        # √ñnceki widget'larƒ± temizle
        for i in reversed(range(self.scroll_layout.count())):
            child = self.scroll_layout.itemAt(i).widget()
            if child:
                child.setParent(None)
        
        if not pharmacies:
            # Eczane bulunamadƒ±
            no_pharmacy_label = QLabel("‚ö†Ô∏è ≈ûu anda n√∂bet√ßi eczane bulunamadƒ±")
            no_pharmacy_label.setStyleSheet(f"""
                QLabel {{
                    color: {Colors.WARNING_TEXT};
                    font-size: {Fonts.TITLE_SIZE}px;
                    font-weight: bold;
                    padding: 40px;
                    text-align: center;
                }}
            """)
            no_pharmacy_label.setAlignment(Qt.AlignCenter)
            self.scroll_layout.addWidget(no_pharmacy_label)
            
            # Tekrar deneme mesajƒ±
            retry_label = QLabel("Sistem otomatik olarak g√ºncelleme yapmaya devam edecek...")
            retry_label.setStyleSheet(f"""
                QLabel {{
                    color: {Colors.SECONDARY_TEXT};
                    font-size: {Fonts.NORMAL_SIZE}px;
                    padding: 20px;
                    text-align: center;
                }}
            """)
            retry_label.setAlignment(Qt.AlignCenter)
            self.scroll_layout.addWidget(retry_label)
        else:
            # Ba≈ülƒ±k
            title_label = QLabel(f"üè• {len(pharmacies)} N√∂bet√ßi Eczane Bulundu")
            title_label.setStyleSheet(f"""
                QLabel {{
                    color: {Colors.ACCENT_TEXT};
                    font-size: {Fonts.TITLE_SIZE}px;
                    font-weight: bold;
                    padding: 20px 10px;
                    text-align: center;
                }}
            """)
            title_label.setAlignment(Qt.AlignCenter)
            self.scroll_layout.addWidget(title_label)
            
            # Eczane kartlarƒ±
            for pharmacy in pharmacies:
                card = PharmacyCard(pharmacy)
                self.scroll_layout.addWidget(card)
        
        # Stretch ekle
        self.scroll_layout.addStretch()
        
        logger.info(f"UI updated with {len(pharmacies)} pharmacies")
    
    @pyqtSlot(str)
    def handle_error(self, error_message):
        """Hata mesajlarƒ±nƒ± i≈üler"""
        logger.error(f"UI Error: {error_message}")
        
        # Hata g√∂sterimi (eƒüer ekranda veri yoksa)
        if not self.pharmacies:
            # √ñnceki widget'larƒ± temizle
            for i in reversed(range(self.scroll_layout.count())):
                child = self.scroll_layout.itemAt(i).widget()
                if child:
                    child.setParent(None)
            
            error_label = QLabel(f"‚ùå {error_message}")
            error_label.setStyleSheet(f"""
                QLabel {{
                    color: {Colors.ERROR_TEXT};
                    font-size: {Fonts.SUBTITLE_SIZE}px;
                    font-weight: bold;
                    padding: 30px;
                    text-align: center;
                }}
            """)
            error_label.setAlignment(Qt.AlignCenter)
            error_label.setWordWrap(True)
            self.scroll_layout.addWidget(error_label)
            
            retry_label = QLabel("üîÑ Sistem otomatik olarak tekrar deneyecek...")
            retry_label.setStyleSheet(f"""
                QLabel {{
                    color: {Colors.SECONDARY_TEXT};
                    font-size: {Fonts.NORMAL_SIZE}px;
                    padding: 20px;
                    text-align: center;
                }}
            """)
            retry_label.setAlignment(Qt.AlignCenter)
            self.scroll_layout.addWidget(retry_label)
    
    def keyPressEvent(self, event):
        """Klavye olaylarƒ± (test i√ßin)"""
        if not Config.RASPBERRY_PI_MODE:
            if event.key() == Qt.Key_F11:
                # Tam ekran toggle
                if self.isFullScreen():
                    self.showNormal()
                else:
                    self.showFullScreen()
            elif event.key() == Qt.Key_R:
                # Manuel refresh
                self.fetch_data()
            elif event.key() == Qt.Key_Escape:
                # √áƒ±kƒ±≈ü (sadece test modunda)
                if not is_raspberry_pi():
                    self.close()
        
        super().keyPressEvent(event)

class RaspberryPiManager:
    """Raspberry Pi √∂zel y√∂netici sƒ±nƒ±fƒ±"""
    
    def __init__(self):
        self.is_rpi = is_raspberry_pi()
        
    def setup_gpio(self):
        """GPIO pinlerini ayarlar (eƒüer gerekiyorsa)"""
        if not self.is_rpi:
            return
            
        try:
            import RPi.GPIO as GPIO
            GPIO.setmode(GPIO.BCM)
            GPIO.setup(RaspberryPiConfig.STATUS_LED_PIN, GPIO.OUT)
            GPIO.output(RaspberryPiConfig.STATUS_LED_PIN, GPIO.HIGH)  # Durum LED'i yanar
            logger.info("GPIO setup completed")
        except ImportError:
            logger.warning("RPi.GPIO not available")
        except Exception as e:
            logger.error(f"GPIO setup failed: {e}")
    
    def cleanup_gpio(self):
        """GPIO temizliƒüi"""
        if not self.is_rpi:
            return
            
        try:
            import RPi.GPIO as GPIO
            GPIO.cleanup()
            logger.info("GPIO cleanup completed")
        except:
            pass
    
    def check_system_resources(self):
        """Sistem kaynaklarƒ±nƒ± kontrol eder"""
        try:
            import psutil
            
            cpu_percent = psutil.cpu_percent(interval=1)
            memory_percent = psutil.virtual_memory().percent
            
            if cpu_percent > RaspberryPiConfig.MAX_CPU_USAGE:
                logger.warning(f"High CPU usage: {cpu_percent}%")
            
            if memory_percent > RaspberryPiConfig.MAX_MEMORY_USAGE:
                logger.warning(f"High memory usage: {memory_percent}%")
                
            return {
                'cpu_percent': cpu_percent,
                'memory_percent': memory_percent,
                'status': 'healthy' if cpu_percent < RaspberryPiConfig.MAX_CPU_USAGE and memory_percent < RaspberryPiConfig.MAX_MEMORY_USAGE else 'warning'
            }
            
        except ImportError:
            logger.warning("psutil not available for resource monitoring")
            return {'status': 'unknown'}
        except Exception as e:
            logger.error(f"Resource check failed: {e}")
            return {'status': 'error'}

def setup_application():
    """Uygulama ba≈ülangƒ±√ß ayarlarƒ±"""
    app = QApplication(sys.argv)
    
    # Uygulama bilgileri
    app.setApplicationName("N√∂bet√ßi Eczane Sistemi")
    app.setApplicationVersion("2.0.0")
    app.setOrganizationName("Claude Project")
    
    # Raspberry Pi √∂zel ayarlarƒ±
    if is_raspberry_pi():
        logger.info("Running on Raspberry Pi")
        # Ekran ayarlarƒ±
        app.setAttribute(Qt.AA_DisableWindowContextHelpButton, True)
        
        # Sistem bekletmesi engelleme (opsiyonel)
        try:
            os.system("xset s off")  # Screen saver off
            os.system("xset -dpms")  # Power management off
        except:
            pass
    else:
        logger.info("Running in test mode")
    
    return app

def main():
    """Ana fonksiyon"""
    logger.info("="*50)
    logger.info("N√∂bet√ßi Eczane Sistemi Ba≈ülatƒ±lƒ±yor...")
    logger.info(f"Raspberry Pi Mode: {Config.RASPBERRY_PI_MODE}")
    logger.info(f"Target Region: {Config.TARGET_REGION}")
    logger.info(f"Test Mode: {Config.TEST_MODE}")
    logger.info("="*50)
    
    # Raspberry Pi y√∂neticisini ba≈ülat
    rpi_manager = RaspberryPiManager()
    
    try:
        # GPIO setup
        rpi_manager.setup_gpio()
        
        # Ba≈ülatma gecikmesi (Raspberry Pi i√ßin)
        if is_raspberry_pi() and not Config.TEST_MODE:
            logger.info(f"Waiting {Config.AUTO_START_DELAY} seconds for system initialization...")
            time.sleep(Config.AUTO_START_DELAY)
        
        # Qt uygulamasƒ±nƒ± ba≈ülat
        app = setup_application()
        
        # Ana pencereyi olu≈ütur
        window = MainWindow()
        window.show()
        
        # Sistem kaynak kontrol√º (periyodik)
        if is_raspberry_pi():
            resource_timer = QTimer()
            resource_timer.timeout.connect(lambda: rpi_manager.check_system_resources())
            resource_timer.start(60000)  # Her dakika kontrol et
        
        logger.info("Application started successfully")
        
        # Event loop ba≈ülat
        exit_code = app.exec_()
        
        logger.info("Application shutting down...")
        return exit_code
        
    except KeyboardInterrupt:
        logger.info("Application interrupted by user")
        return 0
    except Exception as e:
        logger.critical(f"Critical error: {e}")
        return 1
    finally:
        # Temizlik
        rpi_manager.cleanup_gpio()
        logger.info("Cleanup completed")

if __name__ == "__main__":
    sys.exit(main())
